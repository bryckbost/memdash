{"name":"Memdash","body":"# Memdash\r\n\r\nA dashboard for your memcache.\r\n\r\n![Screenshot of memdash](https://github.com/bryckbost/memdash/raw/front-end/screenshot.png)\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'memdash-activerecord'\r\n\r\nAnd then from the console, run:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install memdash-activerecord\r\n    $ gem install memdash-mongo_mapper\r\n\r\n## Usage\r\n\r\nTo begin using Memdash with ActiveRecord, run the following:\r\n\r\n    $ rails g memdash:active_record\r\n    $ rake db:migrate\r\n\r\nThe generator will create a table (`memdash_reports`) to store a serialized column of statistics from your cache servers.\r\n\r\nIf you're using it with MongoMapper, there's no extra setup required.\r\n\r\nFrom this point onward, any calls to the cache should generate statistics and shove them into that table. But don't worry, Memdash won't actually write to the database on every call. Instead, it caches the stats within memcache for a minute and writes when it needs to.\r\n\r\nTo view the dashboard, you'll need to add `require 'memdash/server'` to `config/routes.rb` and mount a server at an endpoint. It might look something like this:\r\n\r\n    require 'memdash/server'\r\n\r\n    MyRailsApp::Application.routes.draw do\r\n      …other routes…\r\n\r\n      mount Memdash::Server.new, :at => \"/memdash\"\r\n    end\r\n\r\n## What's the point?\r\n\r\nMemdash is meant to give you insight into your memcached setup without adding overhead to your application or relying on a background process.\r\n\r\nI find it useful when deploying apps to Heroku, where the memcached add-on is a bit of a black box. Stuff goes in, stuff comes out. Hopefully, it's being used effectively. Memdash could fill the gap between not having any statistics and having to send custom data to Scout, New Relic or statsd.\r\n\r\n## How Does it Work?\r\n\r\nBuilding on top of [Dalli](https://github.com/mperham/dalli), Memdash hooks into Dalli's chokepoint method to generate statistics.\r\n\r\nWhen a call to the cache is triggered, `memdash` performs that operation and does a `get` for the key `memdash`. If the returned value is not found, Memdash then writes the cache statistics to the database and `add`s the `memdash` key with a default time to live of 60 seconds.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request","tagline":"Gain insight into your memcache","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}